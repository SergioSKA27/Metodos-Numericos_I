import streamlit as st
import numpy as np
import matplotlib as plt
import pandas as pd
import plotly.graph_objects as go
import sympy as sp
import base64
import struct
import math
from streamlit_extras.stoggle import stoggle



def dwf(x):
    return x**3 - 2*x - 5

def dddf(x):
    return 3*x**2 - 2

def newton_method(f,x0, tolerance, max_iterations):
    """
    The function implements the Newton-Raphson method for finding roots of a function with a given tolerance and maximum
    number of iterations.

    :param f: The function for which we want to find the root using Newton's method
    :param x0: The initial guess for the root of the function
    :param tolerance: The desired level of accuracy or closeness to the true solution. The algorithm will stop iterating
    once the absolute value of the function evaluated at the current guess is less than or equal to the tolerance value
    :param max_iterations: The maximum number of iterations the function will perform before stopping, regardless of whether
    the desired tolerance has been reached or not
    :return: three lists: x_values, y_values, and tab. x_values contains the x values at each iteration, y_values contains
    the corresponding y values, and tab contains a table with columns for x, f(x), x - f(x)/f'(x), and a boolean indicating
    whether abs(f(x)) < tolerance.
    """
    x_values = []
    y_values = []
    iterations = 0
    tab = []

    fx = sp.lambdify(list(f.free_symbols),f)
    dfx = sp.lambdify(list(f.free_symbols),sp.diff(f))

    while iterations < max_iterations:
        x_values.append(x0)
        y_values.append(fx(x0))
        tab.append([x0,fx(x0),x0 - fx(x0) / dfx(x0),str(abs(fx(x0)) < tolerance)])

        if abs(fx(x0)) < tolerance:
            break

        x1 = x0 - fx(x0) / dfx(x0)
        x0 = x1

        iterations += 1

    return x_values, y_values,tab







st.title('2. Soluci√≥n Num√©rica de Ecuaciones de una Sola Variable')







r'''
# 2.3 M√©todo de Newton

El m√©todo de Newton, tambi√©n conocido como el m√©todo de Newton-Raphson, es un algoritmo iterativo utilizado para
encontrar ra√≠ces de una funci√≥n. Este m√©todo es altamente eficiente cuando se cuenta con una buena estimaci√≥n inicial
y la funci√≥n es suficientemente suave.

El algoritmo del m√©todo de Newton se puede resumir en los siguientes pasos:

- 1. Dado un punto inicial $x_0$ cercano a la ra√≠z de la funci√≥n $f(x)$, se calcula la pendiente de la funci√≥n en
ese punto, es decir, su derivada $f'(x_0)$.

- 2. Se calcula la recta tangente a la curva de la funci√≥n en el punto $(x_0, f(x_0))$. Esta recta intersecta el
eje $x$ en el punto $x_1$, que se convierte en una mejor aproximaci√≥n de la ra√≠z.

- 3. Se repiten los pasos 1 y 2 utilizando $x_1$ como el nuevo punto inicial, calculando su derivada $f'(x_1)$ y
encontrando la nueva aproximaci√≥n $x_2$ mediante la intersecci√≥n de la recta tangente.

- 4. Se contin√∫a este proceso de forma iterativa hasta alcanzar una aproximaci√≥n deseada o agotar un n√∫mero m√°ximo de iteraciones.

La f√≥rmula general para la iteraci√≥n del m√©todo de Newton es:

$$
\begin{align*}
x_{n+1} = x_n - \frac{{f(x_n)}}{{f'(x_n)}}
\end{align*}
$$

El m√©todo de Newton converge r√°pidamente hacia la ra√≠z si la estimaci√≥n inicial es cercana a la ra√≠z y si la funci√≥n
es suficientemente suave. La convergencia del m√©todo est√° determinada por la tasa de cambio de la funci√≥n en las
proximidades de la ra√≠z. Si la derivada es grande en ese punto, la convergencia ser√° m√°s r√°pida.

Es importante tener en cuenta que el m√©todo de Newton requiere el c√°lculo de la derivada de la funci√≥n en cada iteraci√≥n.
En algunos casos, esta derivada puede ser dif√≠cil o costosa de obtener anal√≠ticamente. En tales situaciones, se pueden
utilizar aproximaciones num√©ricas de la derivada, como el m√©todo de diferencias finitas, para calcularla.

Sin embargo, el m√©todo de Newton tambi√©n tiene algunas limitaciones. Puede haber casos en los que el m√©todo no converge
o se estanque en m√≠nimos locales o puntos de inflexi√≥n. Adem√°s, el m√©todo puede ser sensible a la elecci√≥n de la estimaci√≥n
inicial, y diferentes estimaciones pueden conducir a ra√≠ces diferentes o a la no convergencia del m√©todo.


## Algoritmo del M√©todo de Newton

Dado un punto inicial $x_0$ y una tolerancia $\varepsilon$:

1. Inicializar $x = x_0$.
2. Mientras $|f(x)| > \varepsilon$, hacer:
   - Calcular la derivada de $f(x)$, $f'(x)$.
   - Calcular la correcci√≥n $\Delta x = -\frac{f(x)}{f'(x)}$.
   - Actualizar $x = x + \Delta x$.
3. Retornar $x$ como la aproximaci√≥n de la ra√≠z.

El M√©todo de Newton-Raphson es un m√©todo iterativo utilizado para encontrar aproximaciones de ra√≠ces de una
funci√≥n. El m√©todo se basa en la idea de aproximar la funci√≥n por una recta tangente en cada iteraci√≥n y encontrar
el punto en el cual la recta tangente cruza el eje x, que se considera una mejor aproximaci√≥n de la ra√≠z.

En cada iteraci√≥n, se calcula la derivada de la funci√≥n en el punto actual y se determina la correcci√≥n $\Delta x$
necesaria para acercarse a la ra√≠z. Luego, se actualiza el valor de $x$ sumando la correcci√≥n.
Este proceso se repite hasta que se alcance una precisi√≥n deseada, determinada por la tolerancia $\varepsilon$.

El M√©todo de Newton-Raphson es conocido por su convergencia r√°pida cuando se parte de un punto cercano a la ra√≠z y
cuando la funci√≥n es diferenciable y tiene una derivada no nula en la vecindad de la ra√≠z. Sin embargo, es importante
tener en cuenta que el m√©todo puede no converger o puede converger a una ra√≠z diferente si no se cumplen ciertas condiciones.

El algoritmo proporcionado es una implementaci√≥n b√°sica del M√©todo de Newton-Raphson. Se parte de un punto inicial
$x_0$ y se realizan iteraciones hasta alcanzar la precisi√≥n deseada. El valor obtenido en la √∫ltima iteraci√≥n se retorna
como la aproximaci√≥n de la ra√≠z.

Es importante destacar que el M√©todo de Newton-Raphson puede requerir un an√°lisis adicional para asegurar su aplicabilidad
y convergencia, como la elecci√≥n adecuada del punto inicial y la verificaci√≥n de las condiciones necesarias para la
convergencia del m√©todo.


## Supuestos de aplicaci√≥n

Los supuestos de aplicaci√≥n del M√©todo de Newton-Raphson son los siguientes:

1. La funci√≥n $f(x)$ es continuamente diferenciable: El m√©todo se basa en el c√°lculo de la derivada de la funci√≥n en
cada iteraci√≥n. Por lo tanto, se requiere que la funci√≥n $f(x)$ sea diferenciable en el intervalo considerado.
Esto asegura que la derivada exista y se pueda calcular en cada punto necesario.

2. La derivada $f'(x)$ no es igual a cero en el intervalo: El m√©todo utiliza la derivada de la funci√≥n para calcular
la correcci√≥n $\Delta x$ en cada iteraci√≥n. Para evitar divisiones por cero y asegurar una convergencia adecuada,
se asume que la derivada $f'(x)$ no es igual a cero en el intervalo considerado.

3. Se elige un punto inicial cercano a la ra√≠z: El M√©todo de Newton-Raphson converge m√°s r√°pidamente cuando se parte de
un punto inicial cercano a la ra√≠z. Por lo tanto, se asume que se ha seleccionado un punto inicial adecuado que se
encuentra en la vecindad de la ra√≠z buscada.

Estos supuestos son importantes para garantizar la aplicabilidad y la convergencia del M√©todo de Newton-Raphson.
Si alguno de estos supuestos no se cumple, el m√©todo puede no converger o puede converger a una ra√≠z incorrecta.
Por lo tanto, es fundamental considerar estos supuestos al utilizar el m√©todo y, en caso de no cumplirse, evaluar
otras t√©cnicas de b√∫squeda de ra√≠ces m√°s apropiadas.


###  :paperclip: Ejemplo

Sea

$$
\begin{align*}
f(x) = x^3-2x-5,
\end{align*}
$$

con la aproximaci√≥n inicial $x_0 = 2.5$, con un error de tolerancia $1 \times 10^{-6}$:

'''


# Definir punto inicial y par√°metros del m√©todo de Newton
x0 = 2.5
tolerance = 1e-6
max_iterations = 10
x = sp.symbols('x')

# Ejecutar el m√©todo de Newton
x_values, y_values,tab = newton_method(x**3-2*x-5,x0, tolerance, max_iterations)

# Graficar la funci√≥n y el proceso de iteraci√≥n
xs = np.linspace(-5, 5, 100)
y = sp.lambdify(x,x**3-2*x-5)

fig = go.Figure()
fig.add_trace(go.Scatter(x=xs, y=y(xs), name='Funci√≥n f(x)'))
fig.add_trace(go.Scatter(x=x_values, y=y_values, mode='markers', name='Iteraciones del m√©todo',marker_color='rgba(148, 0, 1, .9)'))
fig.update_layout(title='M√©todo de Newton', xaxis_title='x', yaxis_title='f(x)')

fig.add_hline(0)
st.plotly_chart(fig)




st.subheader('M√©todo :triangular_ruler:')

fxx = st.text_input('Ingrese una funcion $f(x)$ :',value='x^2-4*x+2')
try:
    ff = sp.parse_expr(fxx,transformations='all')

    st.write('$f(x) =' + str(sp.latex(ff))+'$')


    fig2 = go.Figure()

    # Agregar la funci√≥n f(x)
    a2,b2 = st.slider('Rango de la gr√°fica',-100,100,(-10,10))
    x2 = np.linspace(a2, b2, 1000)
    y2 = sp.lambdify(x,ff)
    fig2.add_trace(go.Scatter(x=x2, y=y2(x2), name='f(x)'))

    fig2.add_hline(0)
    # Establecer el t√≠tulo y etiquetas de los ejes
    fig2.update_layout(title='Grafica de la funci√≥n', xaxis_title='x', yaxis_title='f(x)')

    # Mostrar la figura
    st.plotly_chart(fig2)
except :
    st.error('Error al introducir la funcion f(x)', icon="üö®")


xini = st.number_input('Ingrese $x_0$: ',-100,100,value=-1)

error = st.text_input('Ingrese el error de tolerancia: ',value='1e-6')

maxitr = st.number_input('Ingrese el m√°ximo n√∫mero de iteraciones: ',1,1000,value=10)


try:
    x_vals,y_vals,mtab = newton_method(ff,xini,float(error),maxitr)
    tpd2 = pd.DataFrame(mtab,columns=['x_n','f(x_n)','x_n+1','|f(c)| < '+str(error)])
    st.write(tpd2)
    # Crear una figura de Plotly
    fig3 = go.Figure()

    # Agregar la funci√≥n f(x)

    x3 = np.linspace(xini-10, xini+10, 100)
    y3 = sp.lambdify(x,ff)
    fig3.add_trace(go.Scatter(x=x3, y=y3(x3), name='f(x)'))

    # Agregar los puntos del m√©todo de bisecci√≥n
    fig3.add_trace(go.Scatter(x=x_vals, y=y_vals, mode='markers', name='Puntos de aproximaci√≥n',marker_color='rgba(152, 0, 0, .8)'))

    fig3.add_hline(0)
    # Establecer el t√≠tulo y etiquetas de los ejes
    fig3.update_layout(title='M√©todo de Newton', xaxis_title='x', yaxis_title='f(x)')

    # Mostrar la figura
    st.plotly_chart(fig3)
except:
    st.write('')

stoggle('Implementaci√≥n en Python',
r'''
    def newton_method(f,x0, tolerance, max_iterations):

        x_values = []
        y_values = []
        iterations = 0

        fx = sp.lambdify(list(f.free_symbols),f)
        dfx = sp.lambdify(list(f.free_symbols),sp.diff(f))

        while iterations < max_iterations:
            x_values.append(x0)
            y_values.append(fx(x0))

            if abs(fx(x0)) < tolerance:
                break

            x1 = x0 - fx(x0) / dfx(x0)
            x0 = x1

            iterations += 1

        return x_values, y_values

'''
)
