import streamlit as st
import numpy as np
import matplotlib as plt
import pandas as pd
import plotly.graph_objects as go
import sympy as sp
import base64
import struct
import math



import plotly.graph_objects as go
import numpy as np

def dwf(x):
    return x**3 - 2*x - 5

def dddf(x):
    return 3*x**2 - 2

def newton_method(f,x0, tolerance, max_iterations):
    x_values = []
    y_values = []
    iterations = 0
    tab = []

    fx = sp.lambdify(list(f.free_symbols),f)
    dfx = sp.lambdify(list(f.free_symbols),sp.diff(f))

    while iterations < max_iterations:
        x_values.append(x0)
        y_values.append(fx(x0))
        tab.append([x0,fx(x0),x0 - fx(x0) / dfx(x0),str(abs(fx(x0)) < tolerance)])

        if abs(fx(x0)) < tolerance:
            break

        x1 = x0 - fx(x0) / dfx(x0)
        x0 = x1

        iterations += 1

    return x_values, y_values,tab







st.title('2. SoluciÃ³n NumÃ©rica de Ecuaciones de una Sola Variable')







r'''
# 2.3 MÃ©todo de Newton

El mÃ©todo de Newton, tambiÃ©n conocido como el mÃ©todo de Newton-Raphson, es un algoritmo iterativo utilizado para encontrar raÃ­ces de una funciÃ³n. Este mÃ©todo es altamente eficiente cuando se cuenta con una buena estimaciÃ³n inicial y la funciÃ³n es suficientemente suave.

El algoritmo del mÃ©todo de Newton se puede resumir en los siguientes pasos:

1. Dado un punto inicial $x_0$ cercano a la raÃ­z de la funciÃ³n $f(x)$, se calcula la pendiente de la funciÃ³n en ese punto, es decir, su derivada $f'(x_0)$.

2. Se calcula la recta tangente a la curva de la funciÃ³n en el punto $(x_0, f(x_0))$. Esta recta intersecta el eje $x$ en el punto $x_1$, que se convierte en una mejor aproximaciÃ³n de la raÃ­z.

3. Se repiten los pasos 1 y 2 utilizando $x_1$ como el nuevo punto inicial, calculando su derivada $f'(x_1)$ y encontrando la nueva aproximaciÃ³n $x_2$ mediante la intersecciÃ³n de la recta tangente.

4. Se continÃºa este proceso de forma iterativa hasta alcanzar una aproximaciÃ³n deseada o agotar un nÃºmero mÃ¡ximo de iteraciones.

La fÃ³rmula general para la iteraciÃ³n del mÃ©todo de Newton es:

$$
\begin{align*}
x_{n+1} = x_n - \frac{{f(x_n)}}{{f'(x_n)}}
\end{align*}
$$

El mÃ©todo de Newton converge rÃ¡pidamente hacia la raÃ­z si la estimaciÃ³n inicial es cercana a la raÃ­z y si la funciÃ³n es suficientemente suave. La convergencia del mÃ©todo estÃ¡ determinada por la tasa de cambio de la funciÃ³n en las proximidades de la raÃ­z. Si la derivada es grande en ese punto, la convergencia serÃ¡ mÃ¡s rÃ¡pida.

Es importante tener en cuenta que el mÃ©todo de Newton requiere el cÃ¡lculo de la derivada de la funciÃ³n en cada iteraciÃ³n. En algunos casos, esta derivada puede ser difÃ­cil o costosa de obtener analÃ­ticamente. En tales situaciones, se pueden utilizar aproximaciones numÃ©ricas de la derivada, como el mÃ©todo de diferencias finitas, para calcularla.

Sin embargo, el mÃ©todo de Newton tambiÃ©n tiene algunas limitaciones. Puede haber casos en los que el mÃ©todo no converge o se estanque en mÃ­nimos locales o puntos de inflexiÃ³n. AdemÃ¡s, el mÃ©todo puede ser sensible a la elecciÃ³n de la estimaciÃ³n inicial, y diferentes estimaciones pueden conducir a raÃ­ces diferentes o a la no convergencia del mÃ©todo.

###  :paperclip: Ejemplo

Sea

$$
\begin{align*}
f(x) = x^3-2x-5,
\end{align*}
$$

con la aproximaciÃ³n inicial $x_0 = 2.5$, con un error de tolerancia $1 \times 10^{-6}$:

'''


# Definir punto inicial y parÃ¡metros del mÃ©todo de Newton
x0 = 2.5
tolerance = 1e-6
max_iterations = 10
x = sp.symbols('x')

# Ejecutar el mÃ©todo de Newton
x_values, y_values,tab = newton_method(x**3-2*x-5,x0, tolerance, max_iterations)

# Graficar la funciÃ³n y el proceso de iteraciÃ³n
xs = np.linspace(-5, 5, 100)
y = sp.lambdify(x,x**3-2*x-5)

fig = go.Figure()
fig.add_trace(go.Scatter(x=xs, y=y(xs), name='FunciÃ³n f(x)'))
fig.add_trace(go.Scatter(x=x_values, y=y_values, mode='markers', name='Iteraciones del mÃ©todo',marker_color='rgba(148, 0, 1, .9)'))
fig.update_layout(title='MÃ©todo de Newton', xaxis_title='x', yaxis_title='f(x)')

fig.add_hline(0)
st.plotly_chart(fig)




st.subheader('MÃ©todo :triangular_ruler:')

fxx = st.text_input('Ingrese una funcion $f(x)$ :',value='x^2-4*x+2')
try:
    ff = sp.parse_expr(fxx,transformations='all')

    st.write('$f(x) =' + str(sp.latex(ff))+'$')


    fig2 = go.Figure()

    # Agregar la funciÃ³n f(x)
    a2,b2 = st.slider('Rango de la grÃ¡fica',-100,100,(-10,10))
    x2 = np.linspace(a2, b2, 1000)
    y2 = sp.lambdify(x,ff)
    fig2.add_trace(go.Scatter(x=x2, y=y2(x2), name='f(x)'))

    fig2.add_hline(0)
    # Establecer el tÃ­tulo y etiquetas de los ejes
    fig2.update_layout(title='Grafica de la funciÃ³n', xaxis_title='x', yaxis_title='f(x)')

    # Mostrar la figura
    st.plotly_chart(fig2)
except :
    st.error('Error al introducir la funcion f(x)', icon="ðŸš¨")


xini = st.number_input('Ingrese $x_0$: ',-100,100,value=-1)

error = st.text_input('Ingrese el error de tolerancia: ',value='1e-6')

maxitr = st.number_input('Ingrese el mÃ¡ximo nÃºmero de iteraciones: ',1,1000,value=10)


try:
    x_vals,y_vals,mtab = newton_method(ff,xini,float(error),maxitr)
    tpd2 = pd.DataFrame(mtab,columns=['x_n','f(x_n)','x_n+1','|f(c)| < '+str(error)])
    st.write(tpd2)
    # Crear una figura de Plotly
    fig3 = go.Figure()

    # Agregar la funciÃ³n f(x)

    x3 = np.linspace(xini-10, xini+10, 100)
    y3 = sp.lambdify(x,ff)
    fig3.add_trace(go.Scatter(x=x3, y=y3(x3), name='f(x)'))

    # Agregar los puntos del mÃ©todo de bisecciÃ³n
    fig3.add_trace(go.Scatter(x=x_vals, y=y_vals, mode='markers', name='Puntos de aproximaciÃ³n',marker_color='rgba(152, 0, 0, .8)'))

    fig3.add_hline(0)
    # Establecer el tÃ­tulo y etiquetas de los ejes
    fig3.update_layout(title='MÃ©todo de Newton', xaxis_title='x', yaxis_title='f(x)')

    # Mostrar la figura
    st.plotly_chart(fig3)
except:
    st.write('')
