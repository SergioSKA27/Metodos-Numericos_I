import streamlit as st
import numpy as np
import matplotlib as plt
import pandas as pd
import plotly.graph_objects as go
import sympy as sp
import base64
import struct
import math
from streamlit_extras.echo_expander import echo_expander



st.cache(max_entries=1000)
def secant_method(f,x0, x1, tolerance, max_iterations):
    """
    The secant_method function implements the secant method for finding roots of a function with a given tolerance and
    maximum number of iterations.

    :param f: The function to find the root of
    :param x0: The initial guess for the root of the function
    :param x1: The initial guess for the root of the function
    :param tolerance: The desired level of accuracy or closeness to the true solution. The algorithm will stop iterating
    once the absolute value of the function evaluated at the current x-value is less than or equal to the tolerance value
    :param max_iterations: The maximum number of iterations the secant method will perform before stopping, even if the
    desired tolerance has not been reached
    :return: three values: a list of x values, a list of y values, and a table containing the values of x0, x1, f(x0),
    f(x1), the new x value, and a boolean indicating whether the absolute value of f(x1) is less than the tolerance.
    """
    x_values = []
    y_values = []
    iterations = 0
    fx = sp.lambdify(list(f.free_symbols),f)
    tab = []

    while iterations < max_iterations:
        x_values.append(x1)
        y_values.append(fx(x1))
        tab.append([x0,x1,fx(x0),fx(x1),x1 - (fx(x1) * (x1 - x0)) / (fx(x1) - fx(x0)),str(abs(fx(x1)) < tolerance)])
        if abs(fx(x1)) < tolerance:
            break

        x2 = x1 - (fx(x1) * (x1 - x0)) / (fx(x1) - fx(x0))
        x0 = x1
        x1 = x2

        iterations += 1

    return x_values, y_values,tab





st.title('2. Soluci√≥n Num√©rica de Ecuaciones de una Sola Variable')






r'''

# 2.4 M√©todo de la Secante

El m√©todo de la secante es un algoritmo iterativo utilizado para encontrar ra√≠ces de una funci√≥n. A diferencia del m√©todo de Newton, que requiere el c√°lculo expl√≠cito de la derivada de la funci√≥n, el m√©todo de la secante estima la derivada num√©ricamente utilizando la informaci√≥n de dos puntos cercanos. Esto hace que el m√©todo de la secante sea m√°s flexible y aplicable a una amplia gama de funciones.

El algoritmo del m√©todo de la secante se puede resumir en los siguientes pasos:

- 1. Dados dos puntos iniciales $x_0$ y $x_1$ cercanos a la ra√≠z de la funci√≥n $f(x)$, se calcula la pendiente de la recta secante que pasa por los puntos $(x_0, f(x_0))$ y $(x_1, f(x_1))$. La pendiente de la recta secante se puede aproximar utilizando la f√≥rmula:

$$
\begin{align*}
m = \frac{{f(x_1) - f(x_0)}}{{x_1 - x_0}}
\end{align*}
$$

- 2. La recta secante intersecta el eje $x$ en el punto $x_2$, que se convierte en una mejor aproximaci√≥n de la ra√≠z. El valor de $x_2$ se puede calcular mediante la ecuaci√≥n de la recta:

$$
\begin{align*}
x_2 = x_1 - \frac{{f(x_1) \cdot (x_1 - x_0)}}{{f(x_1) - f(x_0)}}
\end{align*}
$$

- 3. Se actualizan los valores de $x_0$ y $x_1$ con $x_1$ y $x_2$ respectivamente.

- 4. Se repiten los pasos 1 y 2 hasta alcanzar una aproximaci√≥n deseada o agotar un n√∫mero m√°ximo de iteraciones.

El m√©todo de la secante combina las ventajas del m√©todo de la regla falsa y el m√©todo de Newton. A diferencia de la regla falsa, no requiere el c√°lculo de dos valores de funci√≥n en cada iteraci√≥n. En cambio, utiliza la informaci√≥n de dos puntos anteriores para estimar la ra√≠z. A diferencia del m√©todo de Newton, no necesita conocer la derivada de la funci√≥n, lo que lo hace m√°s general y aplicable a una amplia variedad de funciones.

La convergencia del m√©todo de la secante depende de la elecci√≥n adecuada de los puntos iniciales. Es importante seleccionar dos puntos cercanos a la ra√≠z y evitar valores que causen divisiones por cero o resultados indefinidos. Si los puntos iniciales est√°n demasiado alejados, el m√©todo puede converger lentamente o incluso divergir. En tales casos, se recomienda ajustar los puntos iniciales o utilizar m√©todos alternativos.

El m√©todo de la secante tiene la ventaja de no requerir el c√°lculo expl√≠cito de la derivada de la funci√≥n, lo que lo hace √∫til cuando el c√°lculo de la derivada es complicado o costoso. Sin embargo, el m√©todo puede presentar algunas limitaciones. Puede ser sensible a las irregularidades de la funci√≥n y puede converger a ra√≠ces diferentes dependiendo de los puntos iniciales. Por lo tanto, es importante evaluar cuidadosamente las caracter√≠sticas de la funci√≥n y la elecci√≥n de los puntos iniciales para obtener resultados precisos.

## Algoritmo

El algoritmo del M√©todo de la Secante es el siguiente:

1. Ingresar los valores iniciales $x_0$ y $x_1$.
2. Ingresar la tolerancia $\epsilon$ para la condici√≥n de parada.
3. Ingresar el n√∫mero m√°ximo de iteraciones $N$.
4. Inicializar la variable $i = 2$.
5. Mientras $i \leq N$ y $|f(x_i)| > \epsilon$:
   1. Calcular la aproximaci√≥n $x_{i+1}$ utilizando la f√≥rmula:
      $$x_{i+1} = x_i - \frac{f(x_i)(x_i - x_{i-1})}{f(x_i) - f(x_{i-1})}$$
   2. Incrementar $i$ en 1.
6. Si $|f(x_i)| \leq \epsilon$, se ha encontrado una aproximaci√≥n de la ra√≠z.
7. Si se alcanza el n√∫mero m√°ximo de iteraciones $N$ sin converger, se detiene el algoritmo y se considera que no se ha encontrado la ra√≠z.

En cada iteraci√≥n, el m√©todo utiliza dos puntos $x_{i-1}$ y $x_i$ para estimar la pendiente de la funci√≥n y encontrar
la intersecci√≥n con el eje $x$. La aproximaci√≥n de la ra√≠z se actualiza iterativamente hasta que se cumple la condici√≥n
de parada o se alcanza el n√∫mero m√°ximo de iteraciones.

Es importante destacar que el M√©todo de la Secante no garantiza la convergencia en todos los casos.
Se requiere una buena elecci√≥n de los puntos iniciales y puede haber situaciones en las que el m√©todo no converja o
converja a una ra√≠z incorrecta. Por lo tanto, es necesario realizar un an√°lisis cuidadoso de la funci√≥n y los puntos
iniciales antes de aplicar este m√©todo.


## Supuestos de aplicaci√≥n

Los supuestos de aplicaci√≥n del M√©todo de la Secante son los siguientes:

1. La funci√≥n $f(x)$ es continua y diferenciable: El m√©todo se basa en el c√°lculo de las derivadas de la funci√≥n en
cada iteraci√≥n. Por lo tanto, se requiere que la funci√≥n $f(x)$ sea continua y diferenciable en el intervalo considerado.

2. Se eligen dos puntos iniciales cercanos a la ra√≠z: El m√©todo utiliza dos puntos iniciales $x_{0}$ y $x_{1}$ para
comenzar la iteraci√≥n. Estos puntos deben estar lo suficientemente cerca de la ra√≠z buscada para asegurar la
convergencia del m√©todo. Una buena elecci√≥n de los puntos iniciales es crucial para la eficiencia y convergencia del m√©todo.

3. La funci√≥n $f(x)$ tiene una sola ra√≠z en el intervalo: El M√©todo de la Secante se utiliza para encontrar una ra√≠z
espec√≠fica de una funci√≥n en un intervalo dado. Se asume que la funci√≥n tiene una √∫nica ra√≠z en ese intervalo.
Si hay m√∫ltiples ra√≠ces o no hay ra√≠ces en el intervalo, el m√©todo puede no converger o converger a una ra√≠z incorrecta.

Estos supuestos son importantes para garantizar la aplicabilidad y la convergencia del M√©todo de la Secante. Si alguno
de estos supuestos no se cumple, el m√©todo puede no funcionar correctamente. Por lo tanto, es fundamental considerar
estos supuestos y evaluar la idoneidad del m√©todo en funci√≥n de las caracter√≠sticas de la funci√≥n y el intervalo en cuesti√≥n.

###  :paperclip: Ejemplo

Sea

$$
\begin{align*}
f(x) = x^3-2x-5,
\end{align*}
$$

con la aproximaci√≥n inicial $x_0 = 2.0$ y $x_1 = 3.0$, con un error de tolerancia $1 \times 10^{-6}$:



'''


# Definir puntos iniciales y par√°metros del m√©todo de la secante
x0 = 2.0
x1 = 3.0
tolerance = 1e-6
max_iterations = 100
x = sp.symbols('x')

# Ejecutar el m√©todo de la secante
x_values, y_values,t = secant_method(x**3-2*x-5,x0, x1, tolerance, max_iterations)
table1 = pd.DataFrame(t,columns=['x_0','x_1','f(x_0)','f(x_1)','x_2','|f(c)| < '+str(1e-6)])
st.write(table1)
# Graficar la funci√≥n y el proceso de iteraci√≥n
x_range = [-5, 5]
xs = np.linspace(x_range[0], x_range[1], 100)
y = sp.lambdify(x,x**3-2*x-5)

fig = go.Figure()
fig.add_trace(go.Scatter(x=xs, y=y(xs), name='Funci√≥n f(x)'))
fig.add_trace(go.Scatter(x=x_values, y=y_values, mode='markers', name='Iteraciones del m√©todo',marker_color='rgba(148, 0, 1, .9)'))
fig.update_layout(title='M√©todo de la Secante', xaxis_title='x', yaxis_title='f(x)', xaxis_range=x_range)
fig.add_hline(0)
st.plotly_chart(fig)



st.header('M√©todo :triangular_ruler:')

fxx = st.text_input('Ingrese una funcion $f(x)$ :',value='x^2-4*x+2')
try:
    ff = sp.parse_expr(fxx,transformations='all')

    st.write('$f(x) =' + str(sp.latex(ff))+'$')


    fig2 = go.Figure()

    # Agregar la funci√≥n f(x)
    a2,b2 = st.slider('Rango de la gr√°fica',-100,100,(-10,10))
    x2 = np.linspace(a2, b2, 1000)
    y2 = sp.lambdify(x,ff)
    fig2.add_trace(go.Scatter(x=x2, y=y2(x2), name='f(x)'))

    fig2.add_hline(0)
    # Establecer el t√≠tulo y etiquetas de los ejes
    fig2.update_layout(title='Grafica de la funci√≥n', xaxis_title='x', yaxis_title='f(x)')

    # Mostrar la figura
    st.plotly_chart(fig2)
except :
    st.error('Error al introducir la funcion f(x)', icon="üö®")

st.write('Ingrese los puntos $x_0$ y $x_1$:')
aval = st.number_input('Ingrese $x_0$: ',-100,100,value=-1)
bval = st.number_input('Ingrese $x_1$: ',-100,100,value=1)
error = st.text_input('Ingrese el error de tolerancia: ',value='1e-6')

maxitr = st.number_input('Ingrese el m√°ximo n√∫mero de iteraciones: ',1,1000,value=10)


try:
    if st.button('Calcular'):
        x_vals,y_vals,mtab = secant_method(ff,aval,bval,float(error),maxitr)
        tpd2 = pd.DataFrame(mtab,columns=['x_0','x_1','f(x_0)','f(x_1)','x_2','|f(c)| < '+str(error)])
        st.write(tpd2)
        # Crear una figura de Plotly
        fig3 = go.Figure()

        # Agregar la funci√≥n f(x)

        x3 = np.linspace(aval, bval, 100)
        y3 = sp.lambdify(x,ff)
        fig3.add_trace(go.Scatter(x=x3, y=y3(x3), name='f(x)'))

        # Agregar los puntos del m√©todo de bisecci√≥n
        fig3.add_trace(go.Scatter(x=x_vals, y=y_vals, mode='markers', name='Puntos de aproximaci√≥n',marker_color='rgba(152, 0, 0, .8)'))

        fig3.add_hline(0)
        # Establecer el t√≠tulo y etiquetas de los ejes
        fig3.update_layout(title='M√©todo de Falsa Posici√≥n', xaxis_title='x', yaxis_title='f(x)')

        # Mostrar la figura
        st.plotly_chart(fig3)
except:
    st.write('')



with echo_expander(code_location="below", label="Implementaci√≥n en Python"):
    import numpy as np
    import sympy as sp
    def secant_method(f,x0, x1, tolerance, max_iterations):

        x_values = []
        y_values = []
        iterations = 0
        fx = sp.lambdify(list(f.free_symbols),f)

        while iterations < max_iterations:
            x_values.append(x1)
            y_values.append(fx(x1))
            if abs(fx(x1)) < tolerance:
                break

            x2 = x1 - (fx(x1) * (x1 - x0)) / (fx(x1) - fx(x0))
            x0 = x1
            x1 = x2

            iterations += 1

        return x_values, y_values

