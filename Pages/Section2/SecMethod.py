import streamlit as st
import numpy as np
import matplotlib as plt
import pandas as pd
import plotly.graph_objects as go
import sympy as sp
import base64
import struct
import math


import plotly.graph_objects as go

def ddf(x):
    return x**3 - 2*x - 5

def secant_method(f,x0, x1, tolerance, max_iterations):
    x_values = []
    y_values = []
    iterations = 0
    fx = sp.lambdify(list(f.free_symbols),f)
    tab = []

    while iterations < max_iterations:
        x_values.append(x1)
        y_values.append(fx(x1))
        tab.append([x0,x1,fx(x0),fx(x1),x1 - (fx(x1) * (x1 - x0)) / (fx(x1) - fx(x0)),str(abs(fx(x1)) < tolerance)])
        if abs(fx(x1)) < tolerance:
            break

        x2 = x1 - (fx(x1) * (x1 - x0)) / (fx(x1) - fx(x0))
        x0 = x1
        x1 = x2

        iterations += 1

    return x_values, y_values,tab





st.title('2. SoluciÃ³n NumÃ©rica de Ecuaciones de una Sola Variable')






r'''

# 2.4 MÃ©todo de la Secante

El mÃ©todo de la secante es un algoritmo iterativo utilizado para encontrar raÃ­ces de una funciÃ³n. A diferencia del mÃ©todo de Newton, que requiere el cÃ¡lculo explÃ­cito de la derivada de la funciÃ³n, el mÃ©todo de la secante estima la derivada numÃ©ricamente utilizando la informaciÃ³n de dos puntos cercanos. Esto hace que el mÃ©todo de la secante sea mÃ¡s flexible y aplicable a una amplia gama de funciones.

El algoritmo del mÃ©todo de la secante se puede resumir en los siguientes pasos:

1. Dados dos puntos iniciales $x_0$ y $x_1$ cercanos a la raÃ­z de la funciÃ³n $f(x)$, se calcula la pendiente de la recta secante que pasa por los puntos $(x_0, f(x_0))$ y $(x_1, f(x_1))$. La pendiente de la recta secante se puede aproximar utilizando la fÃ³rmula:

$$
\begin{align*}
m = \frac{{f(x_1) - f(x_0)}}{{x_1 - x_0}}
\end{align*}
$$

2. La recta secante intersecta el eje $x$ en el punto $x_2$, que se convierte en una mejor aproximaciÃ³n de la raÃ­z. El valor de $x_2$ se puede calcular mediante la ecuaciÃ³n de la recta:

$$
\begin{align*}
x_2 = x_1 - \frac{{f(x_1) \cdot (x_1 - x_0)}}{{f(x_1) - f(x_0)}}
\end{align*}
$$

3. Se actualizan los valores de $x_0$ y $x_1$ con $x_1$ y $x_2$ respectivamente.

4. Se repiten los pasos 1 y 2 hasta alcanzar una aproximaciÃ³n deseada o agotar un nÃºmero mÃ¡ximo de iteraciones.

El mÃ©todo de la secante combina las ventajas del mÃ©todo de la regla falsa y el mÃ©todo de Newton. A diferencia de la regla falsa, no requiere el cÃ¡lculo de dos valores de funciÃ³n en cada iteraciÃ³n. En cambio, utiliza la informaciÃ³n de dos puntos anteriores para estimar la raÃ­z. A diferencia del mÃ©todo de Newton, no necesita conocer la derivada de la funciÃ³n, lo que lo hace mÃ¡s general y aplicable a una amplia variedad de funciones.

La convergencia del mÃ©todo de la secante depende de la elecciÃ³n adecuada de los puntos iniciales. Es importante seleccionar dos puntos cercanos a la raÃ­z y evitar valores que causen divisiones por cero o resultados indefinidos. Si los puntos iniciales estÃ¡n demasiado alejados, el mÃ©todo puede converger lentamente o incluso divergir. En tales casos, se recomienda ajustar los puntos iniciales o utilizar mÃ©todos alternativos.

El mÃ©todo de la secante tiene la ventaja de no requerir el cÃ¡lculo explÃ­cito de la derivada de la funciÃ³n, lo que lo hace Ãºtil cuando el cÃ¡lculo de la derivada es complicado o costoso. Sin embargo, el mÃ©todo puede presentar algunas limitaciones. Puede ser sensible a las irregularidades de la funciÃ³n y puede converger a raÃ­ces diferentes dependiendo de los puntos iniciales. Por lo tanto, es importante evaluar cuidadosamente las caracterÃ­sticas de la funciÃ³n y la elecciÃ³n de los puntos iniciales para obtener resultados precisos.

###  :paperclip: Ejemplo

Sea

$$
\begin{align*}
f(x) = x^3-2x-5,
\end{align*}
$$

con la aproximaciÃ³n inicial $x_0 = 2.0$ y $x_1 = 3.0$, con un error de tolerancia $1 \times 10^{-6}$:



'''


# Definir puntos iniciales y parÃ¡metros del mÃ©todo de la secante
x0 = 2.0
x1 = 3.0
tolerance = 1e-6
max_iterations = 100
x = sp.symbols('x')

# Ejecutar el mÃ©todo de la secante
x_values, y_values,t = secant_method(x**3-2*x-5,x0, x1, tolerance, max_iterations)
table1 = pd.DataFrame(t,columns=['x_0','x_1','f(x_0)','f(x_1)','x_2','|f(c)| < '+str(1e-6)])
st.write(table1)
# Graficar la funciÃ³n y el proceso de iteraciÃ³n
x_range = [-5, 5]
xs = np.linspace(x_range[0], x_range[1], 100)
y = sp.lambdify(x,x**3-2*x-5)

fig = go.Figure()
fig.add_trace(go.Scatter(x=xs, y=y(xs), name='FunciÃ³n f(x)'))
fig.add_trace(go.Scatter(x=x_values, y=y_values, mode='markers', name='Iteraciones del mÃ©todo',marker_color='rgba(148, 0, 1, .9)'))
fig.update_layout(title='MÃ©todo de la Secante', xaxis_title='x', yaxis_title='f(x)', xaxis_range=x_range)
fig.add_hline(0)
st.plotly_chart(fig)



st.header('MÃ©todo :triangular_ruler:')

fxx = st.text_input('Ingrese una funcion $f(x)$ :',value='x^2-4*x+2')
try:
    ff = sp.parse_expr(fxx,transformations='all')

    st.write('$f(x) =' + str(sp.latex(ff))+'$')


    fig2 = go.Figure()

    # Agregar la funciÃ³n f(x)
    a2,b2 = st.slider('Rango de la grÃ¡fica',-100,100,(-10,10))
    x2 = np.linspace(a2, b2, 1000)
    y2 = sp.lambdify(x,ff)
    fig2.add_trace(go.Scatter(x=x2, y=y2(x2), name='f(x)'))

    fig2.add_hline(0)
    # Establecer el tÃ­tulo y etiquetas de los ejes
    fig2.update_layout(title='Grafica de la funciÃ³n', xaxis_title='x', yaxis_title='f(x)')

    # Mostrar la figura
    st.plotly_chart(fig2)
except :
    st.error('Error al introducir la funcion f(x)', icon="ðŸš¨")

st.write('Ingrese los puntos $x_0$ y $x_1$:')
aval = st.number_input('Ingrese $x_0$: ',-100,100,value=-1)
bval = st.number_input('Ingrese $x_1$: ',-100,100,value=1)
error = st.text_input('Ingrese el error de tolerancia: ',value='1e-6')

maxitr = st.number_input('Ingrese el mÃ¡ximo nÃºmero de iteraciones: ',1,1000,value=10)


try:
    x_vals,y_vals,mtab = secant_method(ff,aval,bval,float(error),maxitr)
    tpd2 = pd.DataFrame(mtab,columns=['x_0','x_1','f(x_0)','f(x_1)','x_2','|f(c)| < '+str(error)])
    st.write(tpd2)
    # Crear una figura de Plotly
    fig3 = go.Figure()

    # Agregar la funciÃ³n f(x)

    x3 = np.linspace(aval, bval, 100)
    y3 = sp.lambdify(x,ff)
    fig3.add_trace(go.Scatter(x=x3, y=y3(x3), name='f(x)'))

    # Agregar los puntos del mÃ©todo de bisecciÃ³n
    fig3.add_trace(go.Scatter(x=x_vals, y=y_vals, mode='markers', name='Puntos de aproximaciÃ³n',marker_color='rgba(152, 0, 0, .8)'))

    fig3.add_hline(0)
    # Establecer el tÃ­tulo y etiquetas de los ejes
    fig3.update_layout(title='MÃ©todo de Falsa PosiciÃ³n', xaxis_title='x', yaxis_title='f(x)')

    # Mostrar la figura
    st.plotly_chart(fig3)
except:
    st.write('')


